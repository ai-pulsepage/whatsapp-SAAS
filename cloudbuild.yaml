# GenSpark AI - Cloud Build Configuration
# CI/CD Pipeline for WhatsApp Business Automation Platform

steps:
  # Step 1: Build frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/genspark-frontend:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/genspark-frontend:latest',
      '-f', 'docker/Dockerfile.frontend',
      '.'
    ]
    dir: '.'

  # Step 2: Build backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/genspark-api:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/genspark-api:latest',
      '-f', 'docker/Dockerfile.backend',
      '.'
    ]
    dir: '.'

  # Step 3: Push frontend image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args: ['push', 'gcr.io/$PROJECT_ID/genspark-frontend:$BUILD_ID']
    waitFor: ['build-frontend']

  # Step 4: Push backend image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args: ['push', 'gcr.io/$PROJECT_ID/genspark-api:$BUILD_ID']
    waitFor: ['build-backend']

  # Step 5: Push latest tags
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend-latest'
    args: ['push', 'gcr.io/$PROJECT_ID/genspark-frontend:latest']
    waitFor: ['build-frontend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend-latest'
    args: ['push', 'gcr.io/$PROJECT_ID/genspark-api:latest']
    waitFor: ['build-backend']

  # Step 6: Deploy frontend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend'
    args: [
      'run', 'deploy', 'genspark-frontend',
      '--image=gcr.io/$PROJECT_ID/genspark-frontend:$BUILD_ID',
      '--region=us-central1',
      '--platform=managed',
      '--allow-unauthenticated',
      '--memory=1Gi',
      '--cpu=1',
      '--min-instances=0',
      '--max-instances=10',
      '--port=3000',
      '--set-env-vars=NODE_ENV=production,BUILD_ID=$BUILD_ID',
      '--service-account=genspark-app-sa@$PROJECT_ID.iam.gserviceaccount.com',
      '--vpc-connector=projects/$PROJECT_ID/locations/us-central1/connectors/genspark-connector',
      '--vpc-egress=private-ranges-only'
    ]
    waitFor: ['push-frontend']

  # Step 7: Deploy backend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend'
    args: [
      'run', 'deploy', 'genspark-api',
      '--image=gcr.io/$PROJECT_ID/genspark-api:$BUILD_ID',
      '--region=us-central1',
      '--platform=managed',
      '--allow-unauthenticated',
      '--memory=2Gi',
      '--cpu=2',
      '--min-instances=1',
      '--max-instances=20',
      '--port=8080',
      '--set-env-vars=NODE_ENV=production,BUILD_ID=$BUILD_ID',
      '--service-account=genspark-app-sa@$PROJECT_ID.iam.gserviceaccount.com',
      '--vpc-connector=projects/$PROJECT_ID/locations/us-central1/connectors/genspark-connector',
      '--vpc-egress=private-ranges-only',
      '--add-cloudsql-instances=$PROJECT_ID:us-central1:genspark-db',
      '--set-secrets=DATABASE_URL=database-url:latest,JWT_SECRET=jwt-secret:latest,ENCRYPTION_KEY=encryption-key:latest,WHATSAPP_ACCESS_TOKEN=whatsapp-access-token:latest,ANTHROPIC_API_KEY=anthropic-api-key:latest'
    ]
    waitFor: ['push-backend']

  # Step 8: Health check frontend deployment
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check-frontend'
    args: [
      '-f', '-s', '-o', '/dev/null',
      '--retry', '3',
      '--retry-delay', '10',
      '--max-time', '30',
      'https://genspark-frontend-$_SERVICE_SUFFIX-uc.a.run.app/'
    ]
    waitFor: ['deploy-frontend']

  # Step 9: Health check backend deployment
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check-backend'
    args: [
      '-f', '-s', '-o', '/dev/null',
      '--retry', '3',
      '--retry-delay', '10',
      '--max-time', '30',
      'https://genspark-api-$_SERVICE_SUFFIX-uc.a.run.app/health'
    ]
    waitFor: ['deploy-backend']

  # Step 10: Run post-deployment tests
  - name: 'gcr.io/cloud-builders/npm'
    id: 'post-deployment-tests'
    args: ['run', 'test:deployment']
    dir: './backend'
    env: [
      'API_URL=https://genspark-api-$_SERVICE_SUFFIX-uc.a.run.app',
      'FRONTEND_URL=https://genspark-frontend-$_SERVICE_SUFFIX-uc.a.run.app'
    ]
    waitFor: ['health-check-frontend', 'health-check-backend']

# Images to be pushed to Container Registry
images: [
  'gcr.io/$PROJECT_ID/genspark-frontend:$BUILD_ID',
  'gcr.io/$PROJECT_ID/genspark-frontend:latest',
  'gcr.io/$PROJECT_ID/genspark-api:$BUILD_ID',
  'gcr.io/$PROJECT_ID/genspark-api:latest'
]

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  logging: GCS_ONLY
  logsBucket: 'gs://$PROJECT_ID-backups/build-logs'
  substitutionOption: ALLOW_LOOSE

# Substitutions for parameterized builds
substitutions:
  _SERVICE_SUFFIX: ''
  _ENVIRONMENT: 'production'
  _REGION: 'us-central1'

# Build timeout
timeout: '2400s'

# Service account for build process
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/genspark-app-sa@$PROJECT_ID.iam.gserviceaccount.com'

# Artifacts and logs
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-backups/build-artifacts'
    paths: [
      './build-report.json',
      './test-results.xml'
    ]

# Tags for organization
tags: ['genspark-ai', 'production', 'automated-deployment']